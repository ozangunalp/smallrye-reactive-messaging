[
    {
        "extension": "revapi.java",
        "id": "java",
        "configuration": {
            "missing-classes": {
                "behavior": "report",
                "ignoreMissingAnnotations": false
            }
        }
    },
    {
        "extension": "revapi.filter",
        "configuration": {
            "elements": {
                "include": [
                    {
                        "matcher": "java-package",
                        "match": "io.smallrye.reactive.messaging.kafka"
                    }
                ]
            }
        }
    },
    {
        "extension": "revapi.differences",
        "id": "breaking-changes",
        "configuration": {
            "criticality": "highlight",
            "minSeverity": "POTENTIALLY_BREAKING",
            "minCriticality": "documented",
            "differences": [
                {
                    "ignore": true,
                    "code": "java.method.numberOfParametersChanged",
                    "old": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecord<K, T>, java.lang.String, io.smallrye.reactive.messaging.kafka.commit.KafkaCommitHandler, io.smallrye.reactive.messaging.kafka.fault.KafkaFailureHandler, boolean, boolean)",
                    "new": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecord<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecord<K, T>, java.lang.String, int, io.smallrye.reactive.messaging.kafka.commit.KafkaCommitHandler, io.smallrye.reactive.messaging.kafka.fault.KafkaFailureHandler, boolean, boolean)",
                    "justification": "ADD YOUR EXPLANATION FOR THE NECESSITY OF THIS CHANGE"
                },
                {
                    "ignore": true,
                    "code": "java.method.numberOfParametersChanged",
                    "old": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecordBatch<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecords<K, T>, java.lang.String, io.smallrye.reactive.messaging.kafka.commit.KafkaCommitHandler, io.smallrye.reactive.messaging.kafka.fault.KafkaFailureHandler, boolean, boolean)",
                    "new": "method void io.smallrye.reactive.messaging.kafka.IncomingKafkaRecordBatch<K, T>::<init>(org.apache.kafka.clients.consumer.ConsumerRecords<K, T>, java.lang.String, int, io.smallrye.reactive.messaging.kafka.commit.KafkaCommitHandler, io.smallrye.reactive.messaging.kafka.fault.KafkaFailureHandler, boolean, boolean)",
                    "justification": "ADD YOUR EXPLANATION FOR THE NECESSITY OF THIS CHANGE"
                },
                {
                    "ignore": true,
                    "code": "java.method.addedToInterface",
                    "new": "method <K, V> java.util.List<io.smallrye.reactive.messaging.kafka.KafkaConsumer<K, V>> io.smallrye.reactive.messaging.kafka.KafkaClientService::getConsumers(java.lang.String)",
                    "justification": "ADD YOUR EXPLANATION FOR THE NECESSITY OF THIS CHANGE"
                }
            ]
        }
    },
    {
        "extension": "revapi.reporter.json",
        "configuration": {
            "minSeverity": "POTENTIALLY_BREAKING",
            "minCriticality": "documented",
            "output": "target/compatibility.json",
            "indent": true,
            "append": false,
            "keepEmptyFile": true
        }
    },
    {
        "extension": "revapi.reporter.text",
        "configuration": {
            "minSeverity": "POTENTIALLY_BREAKING",
            "minCriticality": "documented",
            "output": "out"
        }
    }
]
